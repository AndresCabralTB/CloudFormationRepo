#This is a new template that will automatically create a public EC2 instance

#Steps
#1. Create a VPC with public subnet

#################
####   VPC    ###
#################

AWSTemplateFormatVersion: '2010-09-09'
Description: Example CloudFormation Template with EC2, IAM, and RDS

Resources:

  #Create a VPC in network 10.255.0.0/16 that gives resources DNS hostnames to allows communcation between eachother
  MyEC2VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Sub '10.255.0.0/16'
      EnableDnsHostnames: true #Enable DNS Hostnames for communcation with other resources
      EnableDnsSupport: true #EnableDnsSupport: true so DNS resolution works inside the VPC

  #Resource that creates an Amazon-provided IPv6 
  #However, this is not needed because we are creating a public VPC that includes public subnets, which provide internet access for your resources.
  VpcCidrBlockIpv6:
    Type: 'AWS::EC2::VPCCidrBlock'
    Properties:
      VpcId: !Ref MyEC2VPC
      AmazonProvidedIpv6CidrBlock: true

  #Create the first subnet in us-west-1a
  MyVPCSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-west-1a
      CidrBlock: 10.255.2.0/24 # must be a subnet inside the VPC range
      MapPublicIpOnLaunch: true
      VpcId: !Ref MyEC2VPC

  #Create the second subnet in us-west-1c
  MyVPCSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-west-1c
      CidrBlock: 10.255.3.0/24 # must be a subnet inside the VPC range
      VpcId: !Ref MyEC2VPC
    
  #Create the route table to direct network connections 
  MyVPCRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyEC2VPC
  
  #Declare the actual routes
  #Allow routing to the internet (all - 0.0.0.0/0)
  MyVPCRoutes:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref MyVPCRouteTable
      GatewayId: !Ref MyInternetGateway
    DependsOn: AttachIGW

  #Create the internet gateway to allow traffic to the internet
  MyInternetGateway:
    Type: AWS::EC2::InternetGateway

  #Attach the Internet Gateway to the VPC
  AttachIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyEC2VPC
      InternetGatewayId: !Ref MyInternetGateway

  #Associate the us-west-1a route table to its corresponding subnet for the same zone
  AssocSubnetRouteTableA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyVPCSubnetA
      RouteTableId: !Ref MyVPCRouteTable

##################
# Now that we created the VPC with two subnets (us-west-1a and us-west-1c), along with the routing tables and the route pointing to the internet gateway, we can move forward by creating the EC2 instance with a public Ipv4

  #This network interface is obsulete because we will be connecting the EC2 to the Internet Gateway in the subnet 
  MyNetworkInterface:
    Type: AWS::EC2::NetworkInterface
    DependsOn:
      - MyEC2VPC
      - MyVPCSubnetA
    Properties:
      Description: This is the network interfact to allow the EC2 to be public
      PrivateIpAddress: 10.255.2.10
      SubnetId: !Ref MyVPCSubnetA

  #Security group to allow connections from my mac only, but to the rest of the web
  MyEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: 
      - MyEC2VPC
    Properties:
      GroupDescription: "This Security Group is for the EC2 instance"
      GroupName: "ec2-security-group"
      SecurityGroupEgress: 
        -   CidrIp: 0.0.0.0/0
            Description: "Outbound rule to the internet"
            FromPort: 0
            IpProtocol: tcp
            ToPort: 65535
      SecurityGroupIngress: 
        -   CidrIp: 177.240.101.188/32
            Description: "Only allow conenctions from Mac"
            FromPort: 22
            IpProtocol: tcp
            ToPort: 22
      VpcId: !Ref MyEC2VPC

  MyPricateEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: 
      - MyEC2VPC
    Properties:
      GroupDescription: "This Security Group is for the Private EC2 instance"
      GroupName: "private-ec2-security-group"
      SecurityGroupIngress: 
        -   Description: "Only allow conenctions from Bastion"
            FromPort: 22
            IpProtocol: tcp
            ToPort: 22
            SourceSecurityGroupId: !Ref MyEC2SecurityGroup  
      VpcId: !Ref MyEC2VPC

  #IAM roles are basically roles that we allow AWS services to have
  #In this case, we are giving EC2 the role (policy) for Amazon SSM Managegment, which allows it to SSM into an instance
  MyIAMRole:
    Type: AWS::IAM::Role
    Properties:
      Description: This is a role for the CloudFormation-EC2
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      MaxSessionDuration: 43200
      RoleName: RoleForBastionEC2CloudFormation
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
          - PolicyName: PolicyToCreateAMI
            PolicyDocument: {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Sid": "CreateAMI",
                      "Effect": "Allow",
                      "Action": [
                          "ec2:Describe*",
                          "ec2:CreateSnapshot",
                          "ec2:CreateImage",
                          "ec2:CreateTags",
                          "ec2:DeregisterImage",
                          "ec2:DeleteSnapshot"
                      ],
                      "Resource": "*"
                  }
              ]
            }
              
            
  #For AWS Services to access a role, they must be assinged an IAM profile, which we are making now
  MyIAMProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: BastionEC2InstanceProfile
      Roles: 
        - !Ref MyIAMRole
  #An AWS Systems Manager document (SSM document) defines the actions that Systems Manager performs on your managed instances.
  #You can run the documents, which are usually scripts, through AWS CLI, or the AWS Systems Manager UI
  #THIS IS NOT NECESSARY TO CONNECT TO AN INSTANCE WITH SYSTEM MANAGER. ALTHOUGH WE CAN ASSOCIATE IT TO THE INSTANCE IF NEEDED
  MySSMDocument:
    Type: AWS::SSM::Document
    Properties:
      Content: 
        schemaVersion: "2.2"
        description: "Document to allow SSM access to EC2 instance"
        parameters:
          Message:
            type: "String"
            description: "Example parameter"
            default: "Hello World"
            allowedValues: 
            - "Hello World"
        mainSteps:
          - action: "aws:runPowerShellScript"
            name: "example"
            inputs:
              timeoutSeconds: '60'
              runCommand:
              - "Write-Output {{Message}}"
      DocumentFormat: YAML
      DocumentType: Command

  MyPublicEC2Instance:
    Type: AWS::EC2::Instance
    DependsOn: 
      - VpcCidrBlockIpv6
      - MyEC2SecurityGroup
      - MyVPCSubnetA
      - MyIAMProfile
      - MySSMDocument
    Properties:
      ImageId: ami-0014f8c08bbcad4ca
      IamInstanceProfile: !Ref MyIAMProfile
      InstanceType: t2.micro
      KeyName: Key-pair-4-CloudFormation
      SecurityGroupIds: 
        - !Ref MyEC2SecurityGroup
      SubnetId: !Ref MyVPCSubnetA
      Tags:
        - Key: Name
          Value: bastion-instance-2

  MyInstanceAssociation:
    Type: AWS::SSM::Association
    DependsOn:
      - MySSMDocument
      - MyPublicEC2Instance
    Properties:
      Name: !Ref MySSMDocument             # -Name 'ad-join-domain' in PowerShell
      Parameters:
        Message:
          - "Hello World"
      Targets:
        - Key: InstanceIds                 # ← case-sensitive; use "InstanceIds"
          Values:
            - !Ref MyPublicEC2Instance     # ← injects the i-... ID at deploy time

  MyPrivateEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-00e93c6f38348c3f1
      InstanceType: t2.micro
      IamInstanceProfile: !Ref MyIAMProfile
      KeyName: Key-pair-4-CloudFormation
      SubnetId: !Ref MyVPCSubnetC
      SecurityGroupIds: 
        - !Ref MyPricateEC2SecurityGroup
      Tags:
        - Key: Name
          Value: private-instance-2

 # Security group for Interface VPC Endpoints (allow HTTPS from private instances)
  VpcEndpointSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow HTTPS from private instances to VPC endpoints"
      VpcId: !Ref MyEC2VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref MyPricateEC2SecurityGroup   # traffic from your private EC2s
      # (egress optional; endpoints don't usually need it)

  # SSM endpoints required for Session Manager
  SsmEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref MyEC2VPC
      VpcEndpointType: Interface
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref MyVPCSubnetC               # place endpoints in your private subnet(s)
      SecurityGroupIds:
        - !Ref VpcEndpointSG

  SsmMessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref MyEC2VPC
      VpcEndpointType: Interface
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssmmessages
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref MyVPCSubnetC
      SecurityGroupIds:
        - !Ref VpcEndpointSG

  Ec2MessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref MyEC2VPC
      VpcEndpointType: Interface
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2messages
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref MyVPCSubnetC
      SecurityGroupIds:
        - !Ref VpcEndpointSG


#Next step - Create a Private DB connected to the Private instance