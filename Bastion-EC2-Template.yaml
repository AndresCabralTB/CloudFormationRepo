#This is a new template that will automatically create a public EC2 instance


AWSTemplateFormatVersion: '2010-09-09'
Description: This Stack will create a Private EC2 Instance with a private RDS and allow connections through a bastion host connected to an internet gateway

Resources:

  #Create a VPC in network 10.255.0.0/16 that gives resources DNS hostnames to allows communcation between eachother
  MyEC2VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Sub '10.255.0.0/16'
      EnableDnsHostnames: true #Enable DNS Hostnames for communcation with other resources
      EnableDnsSupport: true #EnableDnsSupport: true so DNS resolution works inside the VPC

  #Resource that creates an Amazon-provided IPv6 
  #This is not needed because we are creating a public VPC that includes public subnets, which provide internet access for your resources.
  VpcCidrBlockIpv6:
    Type: 'AWS::EC2::VPCCidrBlock'
    Properties:
      VpcId: !Ref MyEC2VPC
      AmazonProvidedIpv6CidrBlock: true

  #Create the first subnet in us-west-1a
  MyVPCSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-west-1a
      CidrBlock: 10.255.2.0/24 # must be a subnet inside the VPC range
      MapPublicIpOnLaunch: true
      VpcId: !Ref MyEC2VPC

  #Create the second subnet in us-west-1c
  MyVPCSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-west-1c
      CidrBlock: 10.255.3.0/24 # must be a subnet inside the VPC range
      VpcId: !Ref MyEC2VPC
    
  #Create the route table to direct network connections 
  MyVPCRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyEC2VPC
  
  #Declare the actual routes
  #Allow routing to the internet (all - 0.0.0.0/0)
  MyVPCRoutes:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref MyVPCRouteTable
      GatewayId: !Ref MyInternetGateway
    DependsOn: AttachIGW

  #Create the internet gateway to allow traffic to the internet
  MyInternetGateway:
    Type: AWS::EC2::InternetGateway

  #Attach the Internet Gateway to the VPC
  AttachIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyEC2VPC
      InternetGatewayId: !Ref MyInternetGateway

  #Associate the us-west-1a route table to its corresponding subnet for the same zone
  AssocSubnetRouteTableA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyVPCSubnetA
      RouteTableId: !Ref MyVPCRouteTable

  # Now that we created the VPC with two subnets (us-west-1a and us-west-1c), along with the routing tables and the route pointing to the internet gateway, we can move forward by creating the EC2 instance with a public Ipv4
  #This network interface is obsulete because we will be connecting the EC2 to the Internet Gateway in the subnet, so it will be commented out to save resources
  #MyNetworkInterface:
  #  Type: AWS::EC2::NetworkInterface
  #  DependsOn:
  #    - MyEC2VPC
  #    - MyVPCSubnetA
  #  Properties:
  #    Description: This is the network interfact to allow the EC2 to be public
  #    PrivateIpAddress: 10.255.2.10
  #    SubnetId: !Ref MyVPCSubnetA

  #Security group to allow connections from my mac only, and to the rest of the web
  MyEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: 
      - MyEC2VPC
    Properties:
      GroupDescription: "This Security Group is for the EC2 instance"
      GroupName: "ec2-security-group"
      SecurityGroupEgress: 
        -   CidrIp: 0.0.0.0/0
            Description: "Outbound rule to the internet"
            FromPort: 0
            IpProtocol: tcp
            ToPort: 65535
      SecurityGroupIngress: 
        -   CidrIp: 177.240.101.188/32
            Description: "Only allow conenctions from Mac"
            FromPort: 22
            IpProtocol: tcp
            ToPort: 22
      VpcId: !Ref MyEC2VPC

  MyPrivateEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: 
      - MyEC2VPC
    Properties:
      GroupDescription: "This Security Group is for the Private EC2 instance"
      GroupName: "private-ec2-security-group"
      SecurityGroupIngress: 
        -   Description: "Only allow conenctions from Bastion"
            FromPort: 22
            IpProtocol: tcp
            ToPort: 22
            SourceSecurityGroupId: !Ref MyEC2SecurityGroup   # your bastion SG
      SecurityGroupEgress: 
        -   Description: "Outbound rule to anywhere"
            FromPort: 0
            IpProtocol: tcp
            ToPort: 63535
            CidrIp: 0.0.0.0/0
      VpcId: !Ref MyEC2VPC

  #IAM roles are basically roles that we allow AWS services to have in order to access resources
  #In this case, we are giving EC2 the role (policy) for Amazon SSM Managegment, which allows it to SSM into an instance
  MyIAMRole:
    Type: AWS::IAM::Role
    Properties:
      Description: This is a role for the CloudFormation-EC2
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      MaxSessionDuration: 43200
      RoleName: RoleForBastionEC2CloudFormation
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
          - PolicyName: PolicyToCreateAMI
            PolicyDocument: {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Sid": "CreateAMI",
                      "Effect": "Allow",
                      "Action": [
                          "ec2:Describe*",
                          "ec2:CreateSnapshot",
                          "ec2:CreateImage",
                          "ec2:CreateTags",
                          "ec2:DeregisterImage",
                          "ec2:DeleteSnapshot"
                      ],
                      "Resource": "*"
                  }
              ]
            }
              
  #For AWS Services to access a role, they must be assinged an IAM profile, which we are making now
  MyIAMProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: BastionEC2InstanceProfile
      Roles: 
        - !Ref MyIAMRole
        
  #Creating the public instance connected to the subnet with the internet gateway connection
  MyPublicEC2Instance:
    Type: AWS::EC2::Instance
    DependsOn: 
      - VpcCidrBlockIpv6
      - MyEC2SecurityGroup
      - MyVPCSubnetA
      - MyIAMProfile
    Properties:
      ImageId: ami-0c438b3129bba37c1
      IamInstanceProfile: !Ref MyIAMProfile
      InstanceType: t2.micro
      KeyName: Key-pair-4-CloudFormation
      SecurityGroupIds: 
        - !Ref MyEC2SecurityGroup
      SubnetId: !Ref MyVPCSubnetA
      Tags:
        - Key: Name
          Value: bastion-instance-2

  #Creating the Private EC2 Instance connected to the private subnet
  MyPrivateEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0514a75f6d0e30391
      InstanceType: t2.micro
      IamInstanceProfile: !Ref MyIAMProfile
      KeyName: Key-pair-4-CloudFormation
      SubnetId: !Ref MyVPCSubnetC
      SecurityGroupIds: 
        - !Ref MyPrivateEC2SecurityGroup
      Tags:
        - Key: Name
          Value: private-instance-2

 # Security group for Interface VPC Endpoints (allow HTTPS from private instances)
  VpcEndpointSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow HTTPS from private instances to VPC endpoints"
      VpcId: !Ref MyEC2VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref MyPrivateEC2SecurityGroup   # traffic from your private EC2s
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref MyEC2SecurityGroup
      # (egress optional; endpoints don't usually need it)

  #Create the DB Instance Role to allow access to RDS - I got this from AWS
  MyDBInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      Description: "This is the IAM role for the RDS"
      RoleName: "RDS-Role"
      AssumeRolePolicyDocument: {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "rds.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                }
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonRDSFullAccess
      Policies: 
        - PolicyName: Policy-For-RDSCluster-CloudFormation
          PolicyDocument: {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Sid": "CrossRegionCommunication",
                      "Effect": "Allow",
                      "Action": [
                          "rds:CrossRegionCommunication"
                      ],
                      "Resource": "*"
                  },
                  {
                      "Sid": "Ec2",
                      "Effect": "Allow",
                      "Action": [
                          "ec2:AllocateAddress",
                          "ec2:AssociateAddress",
                          "ec2:AuthorizeSecurityGroupIngress",
                          "ec2:CreateCoipPoolPermission",
                          "ec2:CreateLocalGatewayRouteTablePermission",
                          "ec2:CreateNetworkInterface",
                          "ec2:CreateSecurityGroup",
                          "ec2:DeleteCoipPoolPermission",
                          "ec2:DeleteLocalGatewayRouteTablePermission",
                          "ec2:DeleteNetworkInterface",
                          "ec2:DeleteSecurityGroup",
                          "ec2:DescribeAddresses",
                          "ec2:DescribeAvailabilityZones",
                          "ec2:DescribeCoipPools",
                          "ec2:DescribeInternetGateways",
                          "ec2:DescribeLocalGatewayRouteTablePermissions",
                          "ec2:DescribeLocalGatewayRouteTables",
                          "ec2:DescribeLocalGatewayRouteTableVpcAssociations",
                          "ec2:DescribeLocalGateways",
                          "ec2:DescribeSecurityGroups",
                          "ec2:DescribeSubnets",
                          "ec2:DescribeVpcAttribute",
                          "ec2:DescribeVpcs",
                          "ec2:DisassociateAddress",
                          "ec2:ModifyNetworkInterfaceAttribute",
                          "ec2:ModifyVpcEndpoint",
                          "ec2:ReleaseAddress",
                          "ec2:RevokeSecurityGroupIngress",
                          "ec2:CreateVpcEndpoint",
                          "ec2:DescribeVpcEndpoints",
                          "ec2:DeleteVpcEndpoints",
                          "ec2:AssignPrivateIpAddresses",
                          "ec2:UnassignPrivateIpAddresses"
                      ],
                      "Resource": "*"
                  },
                  {
                      "Sid": "CloudWatchLogs",
                      "Effect": "Allow",
                      "Action": [
                          "logs:CreateLogGroup"
                      ],
                      "Resource": [
                          "arn:aws:logs:*:*:log-group:/aws/rds/*",
                          "arn:aws:logs:*:*:log-group:/aws/docdb/*",
                          "arn:aws:logs:*:*:log-group:/aws/neptune/*"
                      ]
                  },
                  {
                      "Sid": "CloudWatchStreams",
                      "Effect": "Allow",
                      "Action": [
                          "logs:CreateLogStream",
                          "logs:PutLogEvents",
                          "logs:DescribeLogStreams"
                      ],
                      "Resource": [
                          "arn:aws:logs:*:*:log-group:/aws/rds/*:log-stream:*",
                          "arn:aws:logs:*:*:log-group:/aws/docdb/*:log-stream:*",
                          "arn:aws:logs:*:*:log-group:/aws/neptune/*:log-stream:*"
                      ]
                  },
                  {
                      "Sid": "Kinesis",
                      "Effect": "Allow",
                      "Action": [
                          "kinesis:CreateStream",
                          "kinesis:PutRecord",
                          "kinesis:PutRecords",
                          "kinesis:DescribeStream",
                          "kinesis:SplitShard",
                          "kinesis:MergeShards",
                          "kinesis:DeleteStream",
                          "kinesis:UpdateShardCount"
                      ],
                      "Resource": [
                          "arn:aws:kinesis:*:*:stream/aws-rds-das-*"
                      ]
                  },
                  {
                      "Sid": "CloudWatch",
                      "Effect": "Allow",
                      "Action": [
                          "cloudwatch:PutMetricData"
                      ],
                      "Resource": "*",
                      "Condition": {
                          "StringEquals": {
                              "cloudwatch:namespace": [
                                  "AWS/DocDB",
                                  "AWS/Neptune",
                                  "AWS/RDS",
                                  "AWS/Usage"
                              ]
                          }
                      }
                  },
                  {
                      "Sid": "SecretsManagerPassword",
                      "Effect": "Allow",
                      "Action": [
                          "secretsmanager:GetRandomPassword"
                      ],
                      "Resource": "*"
                  },
                  {
                      "Sid": "SecretsManagerSecret",
                      "Effect": "Allow",
                      "Action": [
                          "secretsmanager:DeleteSecret",
                          "secretsmanager:DescribeSecret",
                          "secretsmanager:PutSecretValue",
                          "secretsmanager:RotateSecret",
                          "secretsmanager:UpdateSecret",
                          "secretsmanager:UpdateSecretVersionStage",
                          "secretsmanager:ListSecretVersionIds"
                      ],
                      "Resource": [
                          "arn:aws:secretsmanager:*:*:secret:rds!*"
                      ],
                      "Condition": {
                          "StringLike": {
                              "secretsmanager:ResourceTag/aws:secretsmanager:owningService": "rds"
                          }
                      }
                  },
                  {
                      "Sid": "SecretsManagerTags",
                      "Effect": "Allow",
                      "Action": "secretsmanager:TagResource",
                      "Resource": "arn:aws:secretsmanager:*:*:secret:rds!*",
                      "Condition": {
                          "ForAllValues:StringEquals": {
                              "aws:TagKeys": [
                                  "aws:rds:primaryDBInstanceArn",
                                  "aws:rds:primaryDBClusterArn"
                              ]
                          },
                          "StringLike": {
                              "secretsmanager:ResourceTag/aws:secretsmanager:owningService": "rds"
                          }
                      }
                  }
              ]
          }

      Tags: 
        - Key: Name
          Value: RoleForRDSCluster

  #Create a security group that only allows connections from the private EC2 Instance
  MyRDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
      - MyPrivateEC2SecurityGroup
    Properties:
      GroupDescription: "RDS Security Group"
      GroupName: rds-security-group
      SecurityGroupIngress: 
        - SourceSecurityGroupId: !Ref MyPrivateEC2SecurityGroup
          Description: "Only allow conenctions from Allow connections from SSH "
          FromPort: 3306
          IpProtocol: tcp
          ToPort: 3306
      VpcId: !Ref MyEC2VPC

  #Create the subnet of the RDS to host it
  MyRDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: This is the RDS Subnet Groupt
      DBSubnetGroupName: RDSSubnetGroup
      SubnetIds: 
        - !Ref MyVPCSubnetC
        - !Ref MyVPCSubnetA
      Tags: 
        - Key: Name
          Value: RDS-Subnet-Group

  #Create the RDS Instance with the subnet, instance role, and security groups assigned
  MyRDSInstance:
    Type: AWS::RDS::DBInstance
    DependsOn: 
      - MyVPCSubnetC
      - MyDBInstanceRole
      - MyRDSSecurityGroup
    Properties:
      AllocatedStorage: 20
      AutoMinorVersionUpgrade: false
      DBName: CloudFormationDB
      DBInstanceClass: db.t3.micro
      DBSubnetGroupName: !Ref MyRDSSubnetGroup
      DomainIAMRoleName: !Ref MyDBInstanceRole
      Engine: mysql
      MasterUsername: acabralreyes
      MasterUserPassword: CleopatraSJFD1.
      MultiAZ: false
      NetworkType: IPV4
      Port: 3306
      PubliclyAccessible: false
      StorageType: gp3
      Tags: 
        - Key: Name
          Value: RDS-Instance
      VPCSecurityGroups:
        - !Ref MyRDSSecurityGroup

  # SSM endpoints required for Session Manager
  # This will be commented out to save resources and because the AMI already have Session Manager Configured
  #SsmEndpoint:
  #  Type: AWS::EC2::VPCEndpoint
  #  Properties:
  #    VpcId: !Ref MyEC2VPC
  #    VpcEndpointType: Interface
  #    ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
  #    PrivateDnsEnabled: true
  #    SubnetIds:
  #      - !Ref MyVPCSubnetC               # place endpoints in your private subnet(s)
  #      - !Ref MyVPCSubnetA
  #    SecurityGroupIds:
  #      - !Ref VpcEndpointSG

  # SSM endpoints required for Session Manager
  # This will be commented out to save resources
  #SsmMessagesEndpoint:
  #  Type: AWS::EC2::VPCEndpoint
  #  Properties:
  #    VpcId: !Ref MyEC2VPC
  #    VpcEndpointType: Interface
  #    ServiceName: !Sub com.amazonaws.${AWS::Region}.ssmmessages
  #    PrivateDnsEnabled: true
  #    SubnetIds:
  #      - !Ref MyVPCSubnetC
  #      - !Ref MyVPCSubnetA
  #    SecurityGroupIds:
  #      - !Ref VpcEndpointSG

  #Ec2MessagesEndpoint:
  #  Type: AWS::EC2::VPCEndpoint
  #  Properties:
  #    VpcId: !Ref MyEC2VPC
  #    VpcEndpointType: Interface
  #    ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2messages
  #    PrivateDnsEnabled: true
  #    SubnetIds:
  #      - !Ref MyVPCSubnetC
  #      - !Ref MyVPCSubnetA
  #    SecurityGroupIds:
  #      - !Ref VpcEndpointSG
